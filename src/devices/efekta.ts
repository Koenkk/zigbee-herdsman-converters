import dataType from 'zigbee-herdsman/dist/zcl/definition/dataType';
import {Definition} from '../lib/types';
import {
    deviceEndpoints,
    temperature,
    humidity,
    enumLookup,
    binary,
    numeric,
    co2,
    illuminance,
} from '../lib/modernExtend';

const defaultReporting = {reporting: {min: 0, max: 300, change: 0}};

const definitions: Definition[] = [
    {
        zigbeeModel: ['EFEKTA_iAQ3'],
        model: 'EFEKTA_iAQ3',
        vendor: 'EFEKTA',
        description: 'CO2 Monitor with IPS TFT Display, outdoor temperature and humidity, date and time',
        extend: [
            deviceEndpoints({endpoints: {'1': 1, '2': 2}}),
            co2(defaultReporting),
            temperature({
                endpointNames: ['1'],
                description: 'Measured value of the built-in temperature sensor',
                ...defaultReporting,
            }),
            temperature({
                endpointNames: ['2'],
                description: 'Measured value of the external temperature sensor',
                ...defaultReporting,
            }),
            humidity({
                endpointNames: ['1'],
                description: 'Measured value of the built-in humidity sensor',
                ...defaultReporting,
            }),
            humidity({
                endpointNames: ['2'],
                description: 'Measured value of the external humidity sensor',
                ...defaultReporting,
            }),
            numeric({
                name: 'voc_index',
                unit: 'VOC Index points',
                cluster: 'genAnalogInput',
                attribute: 'presentValue',
                description: 'VOC index',
                access: 'STATE',
                ...defaultReporting,
            }),
            numeric({
                name: 'voc_raw_data',
                unit: 'ticks',
                cluster: 'genAnalogInput',
                attribute: {ID: 0x0065, type: dataType.singlePrec},
                description: 'SRAW_VOC, digital raw value',
                access: 'STATE',
            }),
            illuminance({
                access: 'STATE',
                ...defaultReporting,
            }),
            binary({
                name: 'auto_brightness',
                valueOn: ['ON', 1],
                valueOff: ['OFF', 0],
                cluster: 'msCO2',
                attribute: {ID: 0x0203, type: dataType.boolean},
                description: 'Enable or Disable Auto Brightness of the Display',
            }),
            binary({
                name: 'night_onoff_backlight',
                valueOn: ['ON', 1],
                valueOff: ['OFF', 0],
                cluster: 'msCO2',
                attribute: {ID: 0x0401, type: dataType.boolean},
                description: 'Complete shutdown of the backlight at night mode',
            }),
            numeric({
                name: 'night_on_backlight',
                unit: 'Hr',
                valueMin: 0,
                valueMax: 23,
                cluster: 'msCO2',
                attribute: {ID: 0x0405, type: dataType.uint8},
                description: 'Night mode activation time',
            }),
            numeric({
                name: 'night_off_backlight',
                unit: 'Hr',
                valueMin: 0,
                valueMax: 23,
                cluster: 'msCO2',
                attribute: {ID: 0x0406, type: dataType.uint8},
                description: 'Night mode deactivation time',
            }),
            enumLookup({
                name: 'rotate',
                lookup: {'0': 0, '90': 90, '180': 180, '270': 270},
                cluster: 'msCO2',
                attribute: {ID: 0x0285, type: dataType.uint16},
                description: 'Display rotation angle',
            }),
            binary({
                name: 'long_chart_period',
                valueOn: ['ON', 1],
                valueOff: ['OFF', 0],
                cluster: 'msCO2',
                attribute: {ID: 0x0204, type: dataType.boolean},
                description: 'The period of plotting the CO2 level(OFF - 1H | ON - 24H)',
            }),
            binary({
                name: 'long_chart_period2',
                valueOn: ['ON', 1],
                valueOff: ['OFF', 0],
                cluster: 'msCO2',
                attribute: {ID: 0x0404, type: dataType.boolean},
                description: 'The period of plotting the VOC Index points(OFF - 1H | ON - 24H)',
            }),
            numeric({
                name: 'set_altitude',
                unit: 'meters',
                valueMin: 0,
                valueMax: 3000,
                cluster: 'msCO2',
                attribute: {ID: 0x0205, type: dataType.uint16},
                description: 'Setting the altitude above sea level (for high accuracy of the CO2 sensor)',
            }),
            numeric({
                name: 'temperature_offset',
                unit: 'Â°C',
                valueMin: -50,
                valueMax: 50,
                valueStep: 0.1,
                scale: 10,
                cluster: 'msTemperatureMeasurement',
                attribute: {ID: 0x0210, type: dataType.int16},
                description: 'Adjust temperature',
            }),
            numeric({
                name: 'humidity_offset',
                unit: '%',
                valueMin: -50,
                valueMax: 50,
                valueStep: 1,
                cluster: 'msRelativeHumidity',
                attribute: {ID: 0x0210, type: dataType.int16},
                description: 'Adjust humidity',
            }),
            binary({
                name: 'internal_or_external',
                valueOn: ['ON', 1],
                valueOff: ['OFF', 0],
                cluster: 'msCO2',
                attribute: {ID: 0x0288, type: dataType.boolean},
                description: 'Display data from internal or external TH sensor',
            }),
            binary({
                name: 'automatic_scal',
                valueOn: ['ON', 1],
                valueOff: ['OFF', 0],
                cluster: 'msCO2',
                attribute: {ID: 0x0402, type: dataType.boolean},
                description: 'Automatic self calibration',
            }),
            binary({
                name: 'forced_recalibration',
                valueOn: ['ON', 1],
                valueOff: ['OFF', 0],
                cluster: 'msCO2',
                attribute: {ID: 0x0202, type: dataType.boolean},
                description: 'Start FRC (Perform Forced Recalibration of the CO2 Sensor)',
            }),
            binary({
                name: 'factory_reset_co2',
                valueOn: ['ON', 1],
                valueOff: ['OFF', 0],
                cluster: 'msCO2',
                attribute: {ID: 0x0206, type: dataType.boolean},
                description: 'Factory Reset CO2 sensor',
            }),
            numeric({
                name: 'manual_forced_recalibration',
                unit: 'ppm',
                valueMin: 0,
                valueMax: 5000,
                cluster: 'msCO2',
                attribute: {ID: 0x0207, type: dataType.uint16},
                description: 'Start Manual FRC (Perform Forced Recalibration of the CO2 Sensor)',
            }),
            binary({
                name: 'enable_gas',
                valueOn: ['ON', 1],
                valueOff: ['OFF', 0],
                cluster: 'msCO2',
                attribute: {ID: 0x0220, type: dataType.boolean},
                description: 'Enable CO2 Gas Control',
            }),
            binary({
                name: 'invert_logic_gas',
                valueOn: ['ON', 1],
                valueOff: ['OFF', 0],
                cluster: 'msCO2',
                attribute: {ID: 0x0225, type: dataType.boolean},
                description: 'Enable invert logic CO2 Gas Control',
            }),
            numeric({
                name: 'high_gas',
                unit: 'ppm',
                valueMin: 400,
                valueMax: 5000,
                cluster: 'msCO2',
                attribute: {ID: 0x0221, type: dataType.uint16},
                description: 'Setting High CO2 Gas Border',
            }),
            numeric({
                name: 'low_gas',
                unit: 'ppm',
                valueMin: 400,
                valueMax: 5000,
                cluster: 'msCO2',
                attribute: {ID: 0x0222, type: dataType.uint16},
                description: 'Setting Low CO2 Gas Border',
            }),
        ],
    },
];

export default definitions;
module.exports = definitions;
